import type { FilterOptions } from '../types.js';
import type { HardhatRuntimeEnvironment } from 'hardhat/types/hre';

const defaultFilterOptions: Required<FilterOptions> = { only: [], except: [] };

export const filter = (data: string[], options: FilterOptions) => {
  const only = options.only ?? defaultFilterOptions.only;
  const except = options.except ?? defaultFilterOptions.except;

  const filteredData = data.filter((entry) => {
    if (only.length && !only.some((m) => entry.match(m))) return false;
    if (except.length && except.some((m) => entry.match(m))) return false;
    return true;
  });

  return filteredData;
};

export const readArtifacts = async (
  hre: Pick<HardhatRuntimeEnvironment, 'artifacts'>,
  filterOptions: FilterOptions = {},
) => {
  const fullyQualifiedNames = filter(
    Array.from(await hre.artifacts.getAllFullyQualifiedNames()),
    filterOptions,
  );

  const artifacts = await Promise.all(
    fullyQualifiedNames.map((fullyQualifiedName) =>
      hre.artifacts.readArtifact(fullyQualifiedName),
    ),
  );

  return artifacts;
};
