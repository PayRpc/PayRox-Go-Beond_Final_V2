import { isObject } from '@nomicfoundation/hardhat-utils/lang';
import { findDependencyPackageJson, readClosestPackageJson, } from '@nomicfoundation/hardhat-utils/package';
import axios from 'axios';
const isSolidstateHardhatPlugin = (plugin) => {
    const name = isObject(plugin) ? plugin.name : plugin;
    return name.startsWith('@solidstate/hardhat-');
};
const querySolidstatePackages = async () => {
    const url = `https://registry.npmjs.org/-/v1/search`;
    const params = { text: `@solidstate`, size: 100 };
    try {
        const response = await axios.get(url, { params });
        const packages = response.data.objects.map((o) => o.package);
        // TODO: ensure deprecated packages are filtered
        return packages
            .filter((p) => p.name.startsWith('@solidstate/'))
            .map((p) => ({
            name: p.name,
            latestVersion: p.version,
        }));
    }
    catch (error) {
        console.log('Unable to fetch list of published plugins, displaying local plugins only.');
        return [];
    }
};
const querySolidstateHardhatPlugins = async () => {
    const packages = await querySolidstatePackages();
    return packages.filter(isSolidstateHardhatPlugin);
};
const getLoadedSolidstateHardhatPlugins = (hre) => {
    return hre.config.plugins
        .map((plugin) => plugin.id)
        .filter(isSolidstateHardhatPlugin);
};
export const getSolidstateHardhatPlugins = async (hre) => {
    const plugins = {};
    // get Solidstate Hardhat plugins available on the NPM registry, exluded deprecated plugins
    const availablePlugins = await querySolidstateHardhatPlugins();
    for (const plugin of availablePlugins) {
        plugins[plugin.name] = plugin;
    }
    // get Solidstate plugins loaded into Hardhat config
    const loadedPluginNames = getLoadedSolidstateHardhatPlugins(hre);
    for (const pluginName of loadedPluginNames) {
        plugins[pluginName] ??= { name: pluginName };
        plugins[pluginName].loaded = true;
    }
    // read installed package versions from each plugin's respective package.json
    await Promise.all(Object.values(plugins).map(async (plugin) => {
        const packageJsonPath = await findDependencyPackageJson(hre.config.paths.root, plugin.name);
        if (packageJsonPath) {
            const { default: packageJson } = await import(packageJsonPath);
            plugin.installedVersion = packageJson.version;
        }
    }));
    // include current package if applicable (for development purposes)
    const packageJson = await readClosestPackageJson(hre.config.paths.root);
    if (isSolidstateHardhatPlugin(packageJson) && plugins[packageJson.name]) {
        plugins[packageJson.name].installedVersion = packageJson.version;
    }
    // NOTE: deprecated plugins which are not loaded into Hardhat config are not included
    return Object.values(plugins);
};
