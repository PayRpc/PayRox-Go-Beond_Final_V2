name: PayRox Refactor Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  refactor-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Setup Hardhat
      run: npx hardhat --version

    - name: Compile contracts
      run: npx hardhat compile

    - name: Run refactor linter
      run: npm run ai:lint
      continue-on-error: true
      id: lint

    - name: Run Diamond compliance tests
      run: npx hardhat test --grep "(loupe|selectors|diamond)"
      continue-on-error: true
      id: diamond-tests

    - name: Run epoch rules tests
      run: npx hardhat test --grep "epoch"
      continue-on-error: true
      id: epoch-tests

    - name: Run role assignment tests
      run: npx hardhat test --grep "(roles|delegatecall|access)"
      continue-on-error: true
      id: role-tests

    - name: Run size and gas tests
      run: npx hardhat test --grep "(size|gas|limit)"
      continue-on-error: true
      id: size-tests

    - name: Check for banned patterns
      run: |
        echo "üîç Checking for banned patterns..."
        
        # Check for loupe functions in facets
        if grep -r "function facets\|function facetFunctionSelectors\|function facetAddresses" facets/ 2>/dev/null; then
          echo "‚ùå ERROR: Loupe functions found in facets directory"
          exit 1
        fi
        
        # Check for oversized facets (approximate check)
        if find artifacts/ -name "*.json" -exec sh -c 'size=$(jq -r ".deployedBytecode.object" "$1" 2>/dev/null | wc -c); if [ $size -gt 49152 ]; then echo "‚ùå ERROR: Potential size limit violation in $1 ($size chars)"; exit 1; fi' _ {} \; 2>/dev/null; then
          echo "‚úÖ No obvious size violations found"
        fi
        
        # Check for proper self-check footers in recent AI outputs
        if find . -name "*.md" -newer .git/HEAD -exec grep -l "SELF-CHECK" {} \; | while read file; do
          if ! grep -q "\[‚úì\] Size OK.*\[‚úì\] No Loupe in Facets.*\[‚úì\] Selectors Parity" "$file"; then
            echo "‚ùå ERROR: Incomplete SELF-CHECK footer in $file"
            exit 1
          fi
        done; then
          echo "‚úÖ SELF-CHECK footers validated"
        fi

    - name: Validate manifest structure
      run: |
        if [ -f "payrox-manifest.json" ]; then
          echo "üîç Validating manifest structure..."
          
          # Check JSON validity
          if ! jq empty payrox-manifest.json; then
            echo "‚ùå ERROR: Invalid JSON in payrox-manifest.json"
            exit 1
          fi
          
          # Check required fields
          if ! jq -e '.version and .facets' payrox-manifest.json >/dev/null; then
            echo "‚ùå ERROR: Manifest missing required fields (version, facets)"
            exit 1
          fi
          
          # Check facet structure
          if ! jq -e '.facets | to_entries[] | .value.selectors | type == "array"' payrox-manifest.json >/dev/null; then
            echo "‚ùå ERROR: Facets must have selectors arrays"
            exit 1
          fi
          
          echo "‚úÖ Manifest structure validated"
        else
          echo "‚ö†Ô∏è  No manifest found - skipping validation"
        fi

    - name: Check selector map integrity
      run: |
        if [ -f "selector_map.json" ]; then
          echo "üîç Validating selector map..."
          
          if ! jq empty selector_map.json; then
            echo "‚ùå ERROR: Invalid JSON in selector_map.json"
            exit 1
          fi
          
          # Check for duplicates
          if jq -r 'to_entries[] | .key' selector_map.json | sort | uniq -d | grep -q .; then
            echo "‚ùå ERROR: Duplicate selectors found in selector map"
            exit 1
          fi
          
          echo "‚úÖ Selector map validated"
        fi

    - name: Validate deployment scripts
      run: |
        echo "üîç Checking deployment scripts..."
        
        # Look for deployment scripts
        deploy_scripts=$(find scripts/ -name "*deploy*.ts" -o -name "*deploy*.js" 2>/dev/null || true)
        
        if [ -n "$deploy_scripts" ]; then
          for script in $deploy_scripts; do
            echo "Checking $script..."
            
            # Check for proper role assignments (should grant to dispatcher, not facets)
            if grep -q "grantRole.*facet" "$script" 2>/dev/null; then
              echo "‚ö†Ô∏è  WARNING: Possible role assignment to facet in $script"
            fi
            
            # Check for CREATE2 usage
            if ! grep -q "CREATE2\|predictDeterministicAddress\|deploy.*salt" "$script" 2>/dev/null; then
              echo "‚ö†Ô∏è  WARNING: No CREATE2 deployment detected in $script"
            fi
          done
          echo "‚úÖ Deployment scripts checked"
        else
          echo "‚ÑπÔ∏è  No deployment scripts found"
        fi

    - name: Generate validation report
      run: |
        echo "üìä PayRox Refactor Validation Report" > validation-report.md
        echo "=====================================" >> validation-report.md
        echo "" >> validation-report.md
        echo "**Commit:** ${{ github.sha }}" >> validation-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> validation-report.md
        echo "**Date:** $(date -u)" >> validation-report.md
        echo "" >> validation-report.md
        
        echo "## Test Results" >> validation-report.md
        echo "" >> validation-report.md
        echo "| Component | Status |" >> validation-report.md
        echo "|-----------|---------|" >> validation-report.md
        echo "| Compilation | ${{ steps.compile.outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> validation-report.md
        echo "| Refactor Lint | ${{ steps.lint.outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> validation-report.md
        echo "| Diamond Tests | ${{ steps.diamond-tests.outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> validation-report.md
        echo "| Epoch Tests | ${{ steps.epoch-tests.outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> validation-report.md
        echo "| Role Tests | ${{ steps.role-tests.outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> validation-report.md
        echo "| Size Tests | ${{ steps.size-tests.outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> validation-report.md
        echo "" >> validation-report.md
        
        # Count facets if directory exists
        if [ -d "facets" ]; then
          facet_count=$(find facets/ -name "*.sol" | wc -l)
          echo "**Facets Found:** $facet_count" >> validation-report.md
        fi
        
        # Check manifest
        if [ -f "payrox-manifest.json" ]; then
          selector_count=$(jq '[.facets[] | .selectors[]] | length' payrox-manifest.json 2>/dev/null || echo "0")
          echo "**Total Selectors:** $selector_count" >> validation-report.md
        fi
        
        echo "" >> validation-report.md
        echo "## Compliance Checklist" >> validation-report.md
        echo "" >> validation-report.md
        echo "- [ ] EIP-170 size limits enforced" >> validation-report.md
        echo "- [ ] No loupe functions in facets" >> validation-report.md
        echo "- [ ] Selector parity maintained" >> validation-report.md
        echo "- [ ] Roles assigned to dispatcher" >> validation-report.md
        echo "- [ ] Epoch rules implemented" >> validation-report.md
        echo "- [ ] CREATE2 deployment ready" >> validation-report.md

    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation-report.md

    - name: Check overall status
      run: |
        echo "üîç Final validation check..."
        
        # Collect all step outcomes
        compile_status="${{ steps.compile.outcome }}"
        lint_status="${{ steps.lint.outcome }}"
        diamond_status="${{ steps.diamond-tests.outcome }}"
        epoch_status="${{ steps.epoch-tests.outcome }}"
        role_status="${{ steps.role-tests.outcome }}"
        size_status="${{ steps.size-tests.outcome }}"
        
        # Critical failures that should block
        critical_failures=0
        
        if [ "$compile_status" != "success" ]; then
          echo "‚ùå CRITICAL: Compilation failed"
          critical_failures=$((critical_failures + 1))
        fi
        
        if [ "$lint_status" != "success" ]; then
          echo "‚ùå CRITICAL: Refactor lint failed"
          critical_failures=$((critical_failures + 1))
        fi
        
        if [ "$diamond_status" != "success" ]; then
          echo "‚ùå CRITICAL: Diamond compliance tests failed"
          critical_failures=$((critical_failures + 1))
        fi
        
        # Non-critical warnings
        if [ "$epoch_status" != "success" ]; then
          echo "‚ö†Ô∏è  WARNING: Epoch tests failed"
        fi
        
        if [ "$role_status" != "success" ]; then
          echo "‚ö†Ô∏è  WARNING: Role tests failed"
        fi
        
        if [ "$size_status" != "success" ]; then
          echo "‚ö†Ô∏è  WARNING: Size tests failed"
        fi
        
        # Final decision
        if [ $critical_failures -gt 0 ]; then
          echo ""
          echo "üí• REFACTOR GATE: BLOCKED"
          echo "Critical failures detected. Please fix and retry."
          exit 1
        else
          echo ""
          echo "‚úÖ REFACTOR GATE: PASSED"
          echo "All critical validations successful."
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: refactor-validation
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Run Slither analysis
      uses: crytic/slither-action@v0.3.0
      continue-on-error: true
      with:
        target: 'facets/'
        fail-on: none
        slither-args: --print human-summary

    - name: Check for common vulnerabilities
      run: |
        echo "üîê Scanning for common vulnerabilities..."
        
        # Check for reentrancy patterns
        if grep -r "external.*payable\|call.*value" facets/ 2>/dev/null; then
          echo "‚ö†Ô∏è  WARNING: Potential reentrancy patterns found"
        fi
        
        # Check for unchecked external calls
        if grep -r "\.call\|\.delegatecall\|\.staticcall" facets/ 2>/dev/null | grep -v "require\|assert"; then
          echo "‚ö†Ô∏è  WARNING: Unchecked external calls found"
        fi
        
        # Check for proper access control
        if ! grep -r "onlyOwner\|hasRole\|modifier" facets/ 2>/dev/null; then
          echo "‚ö†Ô∏è  WARNING: No access control modifiers found"
        fi
        
        echo "‚úÖ Security scan completed"
