name: PayRox Refactor Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FACETS_DIR: contracts/facets

jobs:
  refactor-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Hardhat version
        run: npx hardhat --version

      - name: Compile contracts
        id: compile
        run: npx hardhat compile

      - name: Generate payrox manifest
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "üîß Generating payrox-manifest.json from $FACETS_DIR"
          node tools/generate-manifest.js

      - name: Run refactor linter
        id: lint
        continue-on-error: true
        run: npm run ai:lint

      - name: Run Diamond compliance tests
        id: diamond-tests
        continue-on-error: true
        run: npx hardhat test --grep "(loupe|selectors|diamond)"

      - name: Run epoch rules tests
        id: epoch-tests
        continue-on-error: true
        run: npx hardhat test --grep "epoch"

      - name: Run role assignment tests
        id: role-tests
        continue-on-error: true
        run: npx hardhat test --grep "(roles|delegatecall|access)"

      - name: Run size and gas tests
        id: size-tests
        continue-on-error: true
        run: npx hardhat test --grep "(size|gas|limit)"

      - name: Check for banned patterns
        shell: bash
        run: |
          set -euo pipefail
          echo "üîç Checking for banned patterns..."

          # Loupe functions should not be in facets
          if grep -R "function[[:space:]]\+facets\|function[[:space:]]\+facetFunctionSelectors\|function[[:space:]]\+facetAddresses" "$FACETS_DIR" 2>/dev/null; then
            echo "‚ùå ERROR: Loupe functions found in facets directory"
            exit 1
          fi

          echo "‚úÖ No loupe functions detected in facets"

      - name: Check facet sizes (EIP-170)
        shell: bash
        run: |
          set -euo pipefail
          echo "üìè Checking facet sizes via artifacts..."
          LIMIT=24576
          FAIL=0
          while IFS= read -r -d '' f; do
            # Expect artifacts/contracts/<rel>.sol/<Contract>.json
            bc_hex=$(jq -r '.deployedBytecode.object // .evm.deployedBytecode.object // ""' "$f" 2>/dev/null)
            [ -z "$bc_hex" ] && continue
            bc_hex=${bc_hex#0x}
            bytes=$(( ${#bc_hex} / 2 ))
            if [ "$bytes" -gt $LIMIT ]; then
              echo "‚ùå ERROR: $(basename "$f") runtime bytecode ${bytes}B exceeds EIP-170 ${LIMIT}B"
              FAIL=1
            elif [ "$bytes" -gt $((LIMIT*90/100)) ]; then
              echo "‚ö†Ô∏è  WARNING: $(basename "$f") near size limit (${bytes}/${LIMIT}B)"
            fi
          done < <(find artifacts/contracts -type f -name "*.json" -print0 2>/dev/null)
          [ $FAIL -eq 0 ] && echo "‚úÖ Size checks passed" || exit 1

      - name: Validate manifest structure
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "payrox-manifest.json" ]; then
            echo "üîç Validating manifest structure..."
            jq empty payrox-manifest.json
            jq -e '.version and (.facets | type=="object")' payrox-manifest.json >/dev/null
            # Ensure every facet has a selectors array
            jq -e '([.facets[] | (.selectors | type=="array")] | all)' payrox-manifest.json >/dev/null
            echo "‚úÖ Manifest structure validated"
          else
            echo "‚ö†Ô∏è  No manifest found - skipping validation"
          fi

      - name: Check selector map integrity
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "selector_map.json" ]; then
            echo "üîç Validating selector map..."
            jq empty selector_map.json
            # Require no duplicate keys (selectors)
            dups=$(jq -r 'keys[]' selector_map.json | sort | uniq -d | wc -l)
            if [ "$dups" -gt 0 ]; then
              echo "‚ùå ERROR: Duplicate selectors found in selector map"
              exit 1
            fi
            echo "‚úÖ Selector map validated"
          fi

      - name: Validate deployment scripts
        shell: bash
        run: |
          set -euo pipefail
          echo "üîç Checking deployment scripts..."
          mapfile -t deploy_scripts < <(find scripts/ -type f \( -name "*deploy*.ts" -o -name "*deploy*.js" \) 2>/dev/null || true)
          if [ ${#deploy_scripts[@]} -gt 0 ]; then
            for script in "${deploy_scripts[@]}"; do
              echo "Checking $script..."
              if grep -qE "grantRole\(.*facet" "$script" 2>/dev/null; then
                echo "‚ö†Ô∏è  WARNING: Possible role assignment to facet in $script"
              fi
              if ! grep -qE "CREATE2|predictDeterministicAddress|deploy.*salt" "$script" 2>/dev/null; then
                echo "‚ö†Ô∏è  WARNING: No CREATE2 deployment detected in $script"
              fi
            done
            echo "‚úÖ Deployment scripts checked"
          else
            echo "‚ÑπÔ∏è  No deployment scripts found"
          fi

      - name: Generate validation report
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "üìä PayRox Refactor Validation Report"
            echo "====================================="
            echo
            echo "**Commit:** ${{ github.sha }}"
            echo "**Branch:** ${{ github.ref_name }}"
            echo "**Date:** $(date -u)"
            echo
            echo "## Test Results"
            echo
            echo "| Component | Status |"
            echo "|-----------|--------|"
            echo "| Compilation | ${{ steps.compile.outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
            echo "| Refactor Lint | ${{ steps.lint.outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
            echo "| Diamond Tests | ${{ steps['diamond-tests'].outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
            echo "| Epoch Tests | ${{ steps['epoch-tests'].outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
            echo "| Role Tests | ${{ steps['role-tests'].outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
            echo "| Size Tests | ${{ steps['size-tests'].outcome == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
            echo
            if [ -d "$FACETS_DIR" ]; then
              echo "**Facets Found:** $(find "$FACETS_DIR" -name "*.sol" | wc -l)"
            fi
            if [ -f "payrox-manifest.json" ]; then
              echo "**Total Selectors:** $(jq '[.facets[] | .selectors[]] | length' payrox-manifest.json 2>/dev/null || echo 0)"
            fi
            echo
            echo "## Compliance Checklist"
            echo
            echo "- [ ] EIP-170 size limits enforced"
            echo "- [ ] No loupe functions in facets"
            echo "- [ ] Selector parity maintained"
            echo "- [ ] Roles assigned to dispatcher"
            echo "- [ ] Epoch rules implemented"
            echo "- [ ] CREATE2 deployment ready"
          } > validation-report.md

      - name: Upload validation report and artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-report-and-artifacts
          path: |
            validation-report.md
            artifacts/
            cache/
            coverage/
            test-results/

      - name: Check overall status
        shell: bash
        run: |
          set -euo pipefail
          echo "üîç Final validation check..."
          compile_status="${{ steps.compile.outcome }}"
          lint_status="${{ steps.lint.outcome }}"
          diamond_status="${{ steps['diamond-tests'].outcome }}"
          epoch_status="${{ steps['epoch-tests'].outcome }}"
          role_status="${{ steps['role-tests'].outcome }}"
          size_status="${{ steps['size-tests'].outcome }}"
          critical_failures=0
          [ "$compile_status" != "success" ] && echo "‚ùå CRITICAL: Compilation failed" && critical_failures=$((critical_failures+1))
          [ "$lint_status" != "success" ] && echo "‚ùå CRITICAL: Refactor lint failed" && critical_failures=$((critical_failures+1))
          [ "$diamond_status" != "success" ] && echo "‚ùå CRITICAL: Diamond compliance tests failed" && critical_failures=$((critical_failures+1))
          [ "$critical_failures" -gt 0 ] && echo -e "\nüí• REFACTOR GATE: BLOCKED" && exit 1
          echo -e "\n‚úÖ REFACTOR GATE: PASSED"

  security-scan:
    runs-on: ubuntu-latest
    needs: refactor-validation
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Slither analysis
        uses: crytic/slither-action@v0.3.0
        continue-on-error: true
        with:
          target: contracts
          fail-on: none
          slither-args: --print human-summary

      - name: Heuristic solidity scan
        shell: bash
        run: |
          set -euo pipefail
          echo "üîê Heuristic scan..."
          if grep -R "external.*payable\|call.*value" "$FACETS_DIR" 2>/dev/null; then
            echo "‚ö†Ô∏è  WARNING: Potential reentrancy patterns found"
          fi
          if grep -R "\.call\|\.delegatecall\|\.staticcall" "$FACETS_DIR" 2>/dev/null | grep -v "require\|assert" || true; then
            echo "‚ö†Ô∏è  WARNING: Unchecked external calls found"
          fi
          if ! grep -R "onlyOwner\|hasRole\|modifier" "$FACETS_DIR" 2>/dev/null; then
            echo "‚ö†Ô∏è  WARNING: No access control modifiers found"
          fi
          echo "‚úÖ Security scan completed"
