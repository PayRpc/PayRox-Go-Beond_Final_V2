{
  "file": "C:\\PayRox-Go-Beyond-Ollama\\contracts\\dispacher\\ManifestDispatcher.sol",
  "parts": [
    {
      "name": "ManifestDispatcher",
      "file": "part_2.sol",
      "json": "part_2.json",
      "selectors": [
        "routes(bytes4 selector)",
        "pendingRoot()",
        "pendingEpoch()",
        "pendingSince()",
        "activeRoot()",
        "activeEpoch()",
        "activationDelay()",
        "frozen()",
        "getManifestVersion()",
        "getRoute(bytes4 selector)",
        "getRouteCount()",
        "facetSecurityLevel(address facet)",
        "facetVersionTag(address facet)",
        "getLimits()",
        "verifyManifest(bytes32 manifestHash)",
        "getManifestInfo()",
        "commitRoot(bytes32 newRoot, uint64 newEpoch)",
        "applyRoutes(bytes4[] calldata selectors,\n        address[] calldata facetAddrs,\n        bytes32[] calldata codehashes,\n        bytes32[][] calldata proofs,\n        bool[][]   calldata isRight)",
        "activateCommittedRoot()",
        "removeRoutes(bytes4[] calldata selectors)",
        "setActivationDelay(uint64 newDelay)",
        "freeze()",
        "pause()",
        "unpause()",
        "facetAddresses()",
        "facetFunctionSelectors(address facet)",
        "facetAddress(bytes4 selector)",
        "facets()",
        "supportsInterface(bytes4 interfaceId)",
        "facetAddressesEx(bool includeUnsafe)",
        "facetFunctionSelectorsEx(address facet, uint8 minSecurityLevel)",
        "facetsEx(bool /*includeMetadata*/)",
        "facetAddressEx(bytes4 functionSelector, bytes32 requiredVersion)",
        "facetAddressesBatchEx(bytes4[] calldata functionSelectors)",
        "facetMetadata(address /*facet*/)",
        "checkStorageConflicts(address /*facet*/)",
        "facetImplementation(address /*facet*/)",
        "facetHash(address facet)",
        "selectorHash(address facet)",
        "facetProvenance(address facet)",
        "preflightCheckFacet(address facet,\n        bytes32 expectedCodeHash,\n        bytes4[] calldata claimedSelectors,\n        bool allowAdditions)",
        "adminRegisterUnsafe(address[] calldata facets_, bytes4[][] calldata selectors_)",
        "applyRouteOne(bytes4 selector,\n        address facetAddr,\n        bytes32 codehash,\n        bytes32[] calldata proof,\n        bool[] calldata isRight_)",
        "setFacetSecurityLevel(address facet, uint8 level)",
        "setFacetVersionTag(address facet, bytes32 tag)"
      ]
    }
  ],
  "selectors": [
    "routes(bytes4 selector)",
    "pendingroot()",
    "pendingepoch()",
    "pendingsince()",
    "activeroot()",
    "activeepoch()",
    "activationdelay()",
    "frozen()",
    "getmanifestversion()",
    "getroute(bytes4 selector)",
    "getroutecount()",
    "facetsecuritylevel(address facet)",
    "facetversiontag(address facet)",
    "getlimits()",
    "verifymanifest(bytes32 manifesthash)",
    "getmanifestinfo()",
    "commitroot(bytes32 newroot, uint64 newepoch)",
    "applyroutes(bytes4[] calldata selectors,\n        address[] calldata facetaddrs,\n        bytes32[] calldata codehashes,\n        bytes32[][] calldata proofs,\n        bool[][]   calldata isright)",
    "activatecommittedroot()",
    "removeroutes(bytes4[] calldata selectors)",
    "setactivationdelay(uint64 newdelay)",
    "freeze()",
    "pause()",
    "unpause()",
    "facetaddresses()",
    "facetfunctionselectors(address facet)",
    "facetaddress(bytes4 selector)",
    "facets()",
    "supportsinterface(bytes4 interfaceid)",
    "facetaddressesex(bool includeunsafe)",
    "facetfunctionselectorsex(address facet, uint8 minsecuritylevel)",
    "facetsex(bool /*includemetadata*/)",
    "facetaddressex(bytes4 functionselector, bytes32 requiredversion)",
    "facetaddressesbatchex(bytes4[] calldata functionselectors)",
    "facetmetadata(address /*facet*/)",
    "checkstorageconflicts(address /*facet*/)",
    "facetimplementation(address /*facet*/)",
    "facethash(address facet)",
    "selectorhash(address facet)",
    "facetprovenance(address facet)",
    "preflightcheckfacet(address facet,\n        bytes32 expectedcodehash,\n        bytes4[] calldata claimedselectors,\n        bool allowadditions)",
    "adminregisterunsafe(address[] calldata facets_, bytes4[][] calldata selectors_)",
    "applyrouteone(bytes4 selector,\n        address facetaddr,\n        bytes32 codehash,\n        bytes32[] calldata proof,\n        bool[] calldata isright_)",
    "setfacetsecuritylevel(address facet, uint8 level)",
    "setfacetversiontag(address facet, bytes32 tag)"
  ],
  "by_part": [
    {
      "file": "part_0.sol",
      "functions": 0
    },
    {
      "file": "part_1.sol",
      "functions": 0
    },
    {
      "file": "part_2.sol",
      "functions": 45
    }
  ]
}