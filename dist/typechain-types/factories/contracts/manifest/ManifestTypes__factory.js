"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManifestTypes__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "proposalId",
                type: "bytes32",
            },
        ],
        name: "ProposalNotFound",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "proposalId",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "forVotes",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "quorumRequired",
                type: "uint256",
            },
        ],
        name: "QuorumNotReached",
        type: "error",
    },
    {
        inputs: [],
        name: "UnauthorizedDeployer",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "manifestHash",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "auditor",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bool",
                name: "passed",
                type: "bool",
            },
        ],
        name: "AuditCompleted",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "auditId",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "auditor",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bool",
                name: "passed",
                type: "bool",
            },
        ],
        name: "AuditRegistered",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "id",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "proposer",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "startBlock",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "endBlock",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint16",
                name: "quorumBps",
                type: "uint16",
            },
        ],
        name: "GovernanceProposalCreated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "proposalId",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "voter",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bool",
                name: "support",
                type: "bool",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "weight",
                type: "uint256",
            },
        ],
        name: "GovernanceVoteCast",
        type: "event",
    },
];
const _bytecode = "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122078abaec3127008c3ffa77edb7f5bb11dba3d64091909fd9a663019bf3598205664736f6c634300081e0033";
const isSuperArgs = (xs) => xs.length > 1;
class ManifestTypes__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.ManifestTypes__factory = ManifestTypes__factory;
