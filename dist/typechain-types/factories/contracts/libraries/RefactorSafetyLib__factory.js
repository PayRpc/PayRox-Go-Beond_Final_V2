"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefactorSafetyLib__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "BaselineGasZero",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "expected",
                type: "bytes32",
            },
            {
                internalType: "bytes32",
                name: "actual",
                type: "bytes32",
            },
        ],
        name: "IncompatibleStorageLayout",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "fromVersion",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "toVersion",
                type: "uint256",
            },
        ],
        name: "RefSafetyNonIncrementing",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "have",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "minRequired",
                type: "uint256",
            },
        ],
        name: "RefSafetyVersionIncompatible",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "reason",
                type: "string",
            },
        ],
        name: "RefactorSafetyFailed",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "expected",
                type: "bytes4",
            },
            {
                internalType: "bytes4",
                name: "actual",
                type: "bytes4",
            },
        ],
        name: "SelectorMismatch",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "facetId",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "version",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "bool",
                name: "passed",
                type: "bool",
            },
        ],
        name: "RefactorSafetyCheck",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "bytes4[]",
                name: "selectors",
                type: "bytes4[]",
            },
            {
                indexed: false,
                internalType: "bool",
                name: "compatible",
                type: "bool",
            },
        ],
        name: "SelectorCompatibilityVerified",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "namespace",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "structHash",
                type: "bytes32",
            },
        ],
        name: "StorageLayoutValidated",
        type: "event",
    },
];
const _bytecode = "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209293b0f1710b646a0992d5aa9a5715fff9e396f6c4985b231d11d66851ad81f564736f6c634300081e0033";
const isSuperArgs = (xs) => xs.length > 1;
class RefactorSafetyLib__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.RefactorSafetyLib__factory = RefactorSafetyLib__factory;
